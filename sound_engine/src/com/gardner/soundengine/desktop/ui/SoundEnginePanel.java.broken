package com.gardner.soundengine;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

class SoundEnginePanel extends JPanel {
    private JPanel topPanel;
    private JPanel bottomPanel;
    private JPanel buttonPanel;
    private JPanel textPanel;
    private JLabel frequencyLabel;
    private JLabel noteLabel;
    private JLabel differenceLabel;
    private JButton startEngineButton;
    private JCheckBox saveToFileBox;
    private JButton saveToFileButton;
    private boolean engineRunning;

    private EngineRunner runner;

    private SoundEngine engine;
    private DesktopMicrophone microphone;

    private XYSeries series;
    private XYSeriesCollection data;
    private JFreeChart chart;
    private ChartPanel chartPanel;
    private XYSeries series2;
    private XYSeriesCollection data2;
    private JFreeChart chart2;
    private ChartPanel chartPanel2;


    public SoundEnginePanel(SoundEngine engine, DesktopMicrophone microphone) {
        this.engine = engine;
        this.microphone = microphone;

        setPreferredSize(new Dimension(500, 750));

        frequencyLabel = new JLabel("No audio");
        noteLabel = new JLabel("No audio");
        differenceLabel = new JLabel("No audio");

        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

        topPanel = new JPanel();
        topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.X_AXIS));
        add(topPanel);

        textPanel = new JPanel();
        textPanel.setPreferredSize(new Dimension(300, 150));
        textPanel.setLayout(new BoxLayout(textPanel, BoxLayout.Y_AXIS));
        textPanel.add(frequencyLabel);
        textPanel.add(noteLabel);
        textPanel.add(differenceLabel);
        topPanel.add(textPanel);

        buttonPanel = new JPanel();
        buttonPanel.setPreferredSize(new Dimension(200, 150));
        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));
        startEngineButton = new JButton("Start Microphone");
        startEngineButton.addActionListener(new EngineButtonListener());
        buttonPanel.add(startEngineButton);
        saveToFileBox = new JCheckBox("Save Audio");
        saveToFileBox.addActionListener(new SaveAudioListener());
        buttonPanel.add(saveToFileBox);
        saveToFileButton = new JButton("Save to File");
        saveToFileButton.addActionListener(new SaveAudioListener());
        saveToFileButton.setEnabled(false);
        buttonPanel.add(saveToFileButton);
        topPanel.add(buttonPanel);

        bottomPanel = new JPanel();
        bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));
        add(bottomPanel);

        engineRunning = false;
        series = new XYSeries("FFT");
        data = new XYSeriesCollection(series);
        chart = ChartFactory.createXYLineChart(
                "FFT",
                "Frequency",
                "Magnitude",
                data,
                PlotOrientation.VERTICAL,
                true,
                true,
                false);
        chart.getXYPlot().getRangeAxis().setRange(0.0, 5000.0);
        chart.getXYPlot().getDomainAxis().setRange(0.0, 22000.0);
        //chart.getXYPlot().getRangeAxis().setRange(-64, 64);
        //chart.getXYPlot().getDomainAxis().setRange(0.0, engine.getDataSize());
        chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(500, 300));
        bottomPanel.add(chartPanel);

        series2 = new XYSeries("Raw Signal");
        data2 = new XYSeriesCollection(series2);
        chart2 = ChartFactory.createXYLineChart(
                "Raw Signal",
                "Time Step",
                "Magnitude",
                data2,
                PlotOrientation.VERTICAL,
                true,
                true,
                false);
        if (engine.getBytesPerFrame() == 1) {
            chart2.getXYPlot().getRangeAxis().setRange(-80, 80);
        } else {
            chart2.getXYPlot().getRangeAxis().setRange(-10000, 10000);
        }
        chart2.getXYPlot().getDomainAxis().setRange(0.0, engine.getDataSize());
        chartPanel2 = new ChartPanel(chart2);
        chartPanel2.setPreferredSize(new Dimension(500, 300));
        bottomPanel.add(chartPanel2);
    }

    private void update() {
        updateLabels();
        updateChart();
        //updateChartTesting();
        updateChart2();
    }

    private void updateLabels() {
        double freq = engine.getCurrentFrequency();
        frequencyLabel.setText(Double.toString(freq));
        String note = engine.getCurrentClosestNote();
        noteLabel.setText(note);
        double noteFreq = engine.getNoteFrequency(note);
        differenceLabel.setText(Double.toString(freq - noteFreq));
    }

    private void updateChart() {
        series.clear();
        double[] currentMags = engine.getCurrentMags();
        int num_bins = currentMags.length / 2;
        for (int i=0; i<num_bins; i++) {
            series.add(currentMags[2*i], currentMags[2*i+1]);
        }
    }

    private void updateChartTesting() {
        series.clear();
        double[] signal = engine.getTestingSignal2();
        for (int i=0; i<signal.length; i++) {
            series.add(i, signal[i]);
        }
    }

    private void updateChart2() {
        series2.clear();
        int[] rawSignal = engine.getRawSignal();
        //double[] rawSignal = engine.getTestingSignal();
        for (int i=0; i<rawSignal.length; i++) {
            series2.add(i, rawSignal[i]);
        }
    }

    private class EngineButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            if (engineRunning) {
                runner.end();
                runner.interrupt();
                startEngineButton.setText("Start Microphone");
            } else {
                runner = new EngineRunner();
                runner.start();
                startEngineButton.setText("Stop Microphone");
            }
            engineRunning = !engineRunning;
        }
    }

    private class SaveAudioListener implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            if (event.getSource() == saveToFileBox) {
                if (saveToFileBox.isSelected()) {
                    microphone.setSaveToFile(true);
                    saveToFileButton.setEnabled(true);
                } else {
                    microphone.setSaveToFile(false);
                    saveToFileButton.setEnabled(false);
                }
            } else if (event.getSource() == saveToFileButton) {
                microphone.saveAudio();
            }
        }
    }

    private class EngineRunner extends Thread {
        public void run() {
            engine.start();
            while (engine.sampleMic()) {
                update();
            }
        }

        public void end() {
            engine.stop();
        }
    }
}
